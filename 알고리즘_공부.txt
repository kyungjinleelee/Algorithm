알고리즘

1. 개요
  - 원하는 결과를 만들기 위한 operation 들의 sequence 이다.

2. 온라인 저지(Online Judge) 참고하고 공부하자!! 
 
  - 백준
    https://www.acmicpc.net/

  - 프로그래머스
    https://programmers.co.kr/
    
    멀캠 교안
    https://url.kr/9zp8ol
       ==> p101 에 프로그래머스 활용방법 제공
    https://url.kr/j8gwcz

  - SW Expert Academy
    https://swexpertacademy.com/main/learn/course/courseList.do#none

3. 출제 경향

   - 구현:제공된 가이드 참고해서 문제 해결 
        예> 대문자로 변경
   - 그래프 탐색 : BFS(너비 탐색 ), DFS ( 깊이 탐색)
   - 그리디 알고리즘: 탐욕적 알고리즘. ( 바로 앞에 닥친 문제들을 해결하면서 문제를 해결 )
   - DP(Dynamic Programming: 동적 계획법)
     : 반복적으로 나타나는 처리값을 저장하고 재사용해서 실행 속도를 향상 ( 메모이제이션:	memoization )

   - 정렬(sort)
   - 최단경로 ( 다익스트라 알고리즘 )
      : 그래프에서의 최단 경로

4. 알고리즘 성능 체크 ( 복잡도: complexity )

  가. 시간 복잡도 (*****)
     - 알고리즘 수행 시간 ( CPU가 처리하는 시간 )

  나. 공간 복잡도
     - 메모리 사용량 ( RAM 사용량 )
  
5. 시간 복잡도 표기법

    가. 세타 표기법 : best case와 worst case의 평균
    나. 오메가 표기법 : best case 이용
    다. 빅오 표기법(*****): worst case 이용

       종류 (외우기)
       O(1): 상수 시간
             처리할 데이터 갯수가 1개건 2개건 100개건 또는 1000개건 모두 동일한 시간이 걸린다는 것을 의미한다.
             대표적인 작업
	     - 변수할당
	     - 산술연산, 비교연산, 논리 연산
	     - 객체 생성(new)
	     - 메서드 호출
	     - 조건 검사 ( 반복은 아님 )

       O(logN) : 로그 시간
               : 밑이 2 이다.
               : 밑 2을 몇번을 곱해야지만 N값이 되냐?
               예> O(log8) = 3
	       : 대표적으로 이진검색에서 값을 찾을때 ( 전제는 정렬 필수 )

       O(N) : 선형시간
            : 수행 시간은 데이터 갯수 N에 비례한다는 의미이다.
	    예> O(8)
	    : 대표적으로 선형검색에서 값을 찾을 때 ( 배열 및 리스트 )

      O(N*logN) : 로그 선형 시간

            예> O(8*log(8)) = O(24)
  
      O(N^2) : 이차 시간
            예> O(8^2)= O(64)

      O(N^3) : 삼차 시간
            예> O(8^3)= O(512)

      O(2^n) : 지수 시간
           예> O(2^8)= O(256)

    * 빅오 표기법에서 중요: 가장 큰 차수 사용한다.

      f(n) = n^2
      g(n) = n^2-3n+2

      f(n)과 g(n)의 시간복잡도는 같다고 본다.
      n값을 무한대로 보내면 두 함수의 값이 차이가 거의 없기 때문이다.
      (함수의 점근적 분석법: asymtotic analysis)


6. 재귀적 호출 (recursive call)
  - 일정 조건을 만족할 때 자신을 호출하는 것을 의미한다.
  - 대표적인 형태

    가. 팩토리얼 ( 수를 단계적으로 곱하는 것 )
       예> 1! = 1
          2! = 2*1
	  3! = 3*2*1

          f(1)=1
	  f(2)=2*1 = 2*f(1)
	  f(3)=3*2*1= 3*f(2)

	  점화식: 항을 표현할 때 자신의 앞선 항들을 이용하여 나타낸 식
	  f(n) = n*f(n-1)

   나. 피보나치 수열 ( 첫번째 항과 두번째 항이 1이고 그 뒤의 모든 항은 앞의 2개값을 합한 값으로 지정)
      예> 1 1 2 3 5 8 13 ...


         f(1)=f(2)=1
	 f(3)=f(2)+f(1)
	 f(4)=f(3)+f(2)

	점화식: f(n)=f(n-1)+f(n-2)

    * DP(Dynamic Programming)
     - 메모이제이션(memoization)을 활용하여 동일한 계산이 반복될 때 재사용하여 프로그램의 성능을 향상

7. 자료구조

  가. 선형구조
     - 선형? 현재위치에서 진행해야되는 다음위치가 정해진 경우
     - 대표:
         배열
	 ArrayList
	 LinkedList ( ArrayList 비교해서 삽입/삭제가 효율적 )
	 HashMap ( 저장순서가 없다 )
	 LinkedHashMap ( 저장순서가 보장됨 )
	 TreeMap  ( key 기준으로 자동으로 오름차순 정렬됨 )
	 Stack ( FILO : First In Last Out 
	         그래프 탐색중에서 DFS(Depth First Search)
	       )
	 Queue ( - FIFO: First In First Out
	         - 그래프 탐색중에서 BFS(Breath First Search)
		 - Queue는 인터페이스, 대신에 LinkedList로 구현 
		)
          
         PriorityQueue ( 우선순위 큐, 삭제시 모든 요소가 자동으로 오름차순으로 정렬됨.
	                 따라서 가장 작은 요소를 제일 먼저 가져올수 있다.(제거) )

  나. 비선형구조
    - 비선형? 현재위치에서 진행해야되는 다음위치가 정해져 있지 않은 경우
    - 대표: 
        트리(tree)
	그래프(graph)

########################################################################################################################
트리(tree)
- 용도: 계층적인 구조 표현 ( 위/아래)
- 용어: 
  노드(node): 정점
  간선(edge): 노드간의 연결선
  차수(degree): 노드의 자식수
  깊이(depth): root노드부터 특정 노드까지의 간선의 갯수.
  높이(height): root노드부터 가장 긴 leaf node까지의 정점(노드)의 갯수.

- 종류:
  이진트리(binary tree): 자식노드가 최대 2개로 구성 ( 0, 1, 2)
  정이진트리(full binary tree): 모든 노드가 0 또는 2개의 자식을 가짐.
  완전이진트리(complete binary tree): 마지막 레벨을 제외하고 모두 채워져 있고
                                 마지막 레벨은 왼쪽부터 채워지는 구조.

  포화이진트리(perfect binary tree): 정이진트리 + 완전이진트리 ==> 모든 레벨이 채워져 있는 구조

- 특징: 사이클이 존재하면 안됨.
- 생성방법: 2차원 배열 또는 연결리스트
- 순회: root 기준
  전위순회(pre-order): root --> left --> right
  중위순회(in-order): left --> root --> right
  후위순회(post-order): left --> right --> root

########################################################################################################################
이진탐색트리(Binary Search Tree: BST) 
- 탐색을 위한 자료구조(트리) 
  대표적으로 SQL의 인덱스(index)
-특징:
   root기준으로 왼쪽은 root보다 작고 오른쪽은 root보다 큰 값을 갖느다.
   모든 서브트리(sub tree)들도 BST 만족해야 된다.

########################################################################################################################
그래프(graph)
- 용도: 인접한 정보 표현 

- 용어: 
  정점(vertex): 노드
  간선(edge): 정점간의 연결선
  차수(degree): 노드의 이웃수
  경로(path): 간선의 갯수.

 - 종류:
   무방향 그래프 ==> (0,1) (1,0)
   방향 그래프  ==> <0,1>
   가중치 그래프

- 생성방법: 인접행렬(2차원 배열) 또는 인접리스트(LinkedList)
- 순회:
   DFS(깊이 우선 탐색: Depth First Search)
      : Stack 자료구조

   BFS(너비 우선 탐색: Breath First Search)
     : Queue 자료구조

  ==> 고려할 점: 정점 방문 여부 확인

########################################################################################################################
정렬(sort)

1) 선택 정렬 ( selection sort )
 - 정렬되지 않은 부분에서 최소값을 찾고 가장 맨 앞자리의 요소와 교환한다.
 - 마지막 회차는 반복안함. N개인 배열이면 N-1 만 반복처리한다.

2) 삽입 정렬 ( insertion sort )
 - 현재 타겟이 되는 요소와 이전 요소들 모두 비교해서 작으면 교화
 - 시작 타겟은 두 번째 요소부터 시작한다.

3) 병합 정렬( merge sort )
 - 분할정복 알고리즘( divide and conquer )
 - 방법:  제공된 배열을 반으로 나누고(분할) 왼쪽, 오른쪽 따로 정렬을 하는 방법이다.
        배열의 길이가 1이 될때까지 반복적으로 분할한다.
	 모두 분할되었으면 이웃한 배열을 정렬하면서 병합한다.
	 병합하기 위한 새로운 임시 배열이 필요하다. ( 메모리가 더 필요함 )

########################################################################################################################
최소 신장 트리 ( Mimimum spanning tree: MST )
-신장트리?  원본 그래프에서 모든 노드를 포함하고 사이클이 존재하지 않는 부분 그래프를 의미한다.
-최소신장트리? 신장트리중에서 제공된 가중치의 합이 최소가 되는 신장트리를 의미한다.
- 대표 알고리즘: Prim 알고리즘과 Krusal 알고리즘
- 특징: 그리디(greedy) 알고리즘 기반
      ( 그때 그때의 최선의 선택을 취하는 알고리즘이다. 탐욕 알고리즘이라고도 한다. )

- 우선순위 뷰 (PriorityQueue) 이용해서 가장 작은 가중치값부터 사용이 가능해진다.  
- 정점 방문 여부 확인 필요   
